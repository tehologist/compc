
: BOOT     0 ; 
: DPL 5 ; 
: SP0      6 ; 
: RP0      7 ; 
: '?KEY    8 ; 
: 'EMIT    9 ; 
: 'EXPECT 10 ; 
: 'TAP    11 ; 
: 'ECHO   12 ; 
: 'PROMPT 13 ; 
: BASE    14 ; 
: tmp     15 ; 
: SPAN    16 ; 
: >IN     17 ; 
: #TIBB   18 ; 
: TIBB    19 ; 
: CSP     20 ; 
: 'EVAL   21 ; 
: 'NUMBER 22 ; 
: HLD     23 ; 
: HANDLER 24 ; 
: CONTEXT 25 ; 
: CURRENT 27 ; 
: CP      29 ; 
: NP      30 ; 
: LAST    31 ; 
: STATE   32 ; 
: SPP     33 ; 
: RPP     34 ; 

: TRUE -1 ;  
: FALSE 0 ; 

: BL 32 ; 
: BS 8 ; 

: =IMMED 3 ; 
: =WORDLIST 2 ; 

: + UM+ DROP ; 
: IMMEDIATE LAST @ -1 + =IMMED SWAP ! ; 

: +! SWAP OVER @ + SWAP ! ; 
: HERE CP @ ; 
: ALLOT CP +! ; 
: , HERE 1 ALLOT ! ;  
: [,] , ; IMMEDIATE  

: NOP      0 , ; IMMEDIATE 
: HALT     1 , ; IMMEDIATE 
: LIT      2 , ; IMMEDIATE 
: EXIT     3 , ; IMMEDIATE 
: @        4 , ; IMMEDIATE 
: !        5 , ; IMMEDIATE 
: DROP     6 , ; IMMEDIATE 
: OVER     7 , ; IMMEDIATE 
: SWAP     8 , ; IMMEDIATE 
: DUP      9 , ; IMMEDIATE 
: UM+     10 , ; IMMEDIATE 
: NAND    11 , ; IMMEDIATE 
: 0<      12 , ; IMMEDIATE 
: >R      13 , ; IMMEDIATE 
: R>      14 , ; IMMEDIATE 
: next    15 , ; IMMEDIATE 
: BRANCH  16 , ; IMMEDIATE 
: 0BRANCH 17 , ; IMMEDIATE 
: EXECUTE 18 , ; IMMEDIATE 
: PUTC    19 , ; IMMEDIATE 
: GETC    20 , ; IMMEDIATE 


: COMPILE R> DUP @ , 1 + >R ; 
: COMPILE? STATE @ ; 
: LITERAL COMPILE LIT , ; IMMEDIATE 

: [ FALSE STATE ! ; IMMEDIATE 
: ] TRUE STATE ! ; IMMEDIATE 

: IF COMPILE 0BRANCH HERE 0 , ; IMMEDIATE 
: THEN HERE SWAP ! ; IMMEDIATE 
: FOR COMPILE >R HERE ; IMMEDIATE 
: NEXT COMPILE next , ; IMMEDIATE 
: BEGIN HERE ; IMMEDIATE 
: AGAIN COMPILE BRANCH , ; IMMEDIATE 
: UNTIL COMPILE 0BRANCH , ; IMMEDIATE 
: AHEAD COMPILE BRANCH HERE 0 , ; IMMEDIATE 
: REPEAT ['] AGAIN [,] HERE SWAP ! ; IMMEDIATE 
: AFT DROP ['] AHEAD [,] ['] BEGIN [,] SWAP ; IMMEDIATE 
: ELSE ['] AHEAD [,] SWAP ['] THEN [,] ; IMMEDIATE 
: WHILE ['] IF [,] SWAP ; IMMEDIATE 
: @EXECUTE @ DUP IF EXECUTE THEN ; 

: @       COMPILE? IF 
              COMPILE @ EXIT THEN @ ; IMMEDIATE 
: !       COMPILE? IF 
              COMPILE ! EXIT THEN ! ; IMMEDIATE 
: DROP    COMPILE? IF 
              COMPILE DROP EXIT THEN DROP ; IMMEDIATE 
: OVER    COMPILE? IF 
              COMPILE OVER EXIT THEN OVER ; IMMEDIATE 
: SWAP    COMPILE? IF 
              COMPILE SWAP EXIT THEN SWAP ; IMMEDIATE 
: DUP     COMPILE? IF 
              COMPILE DUP EXIT THEN DUP ; IMMEDIATE 

: #TIB #TIBB @ ; 
: TIB TIBB @ ;  
: \ #TIB @ >IN ! ; IMMEDIATE 

100 #TIBB ! 
101 TIBB ! 

35 SP0 ! 
99 RP0 ! 
 
: ROT >R SWAP R> SWAP ; 
: -ROT SWAP >R SWAP R> ; 
: NIP SWAP DROP ; 
: TUCK SWAP OVER ; 

: R@ R> R> DUP >R SWAP >R ; 
: 2>R SWAP R> SWAP >R SWAP >R >R ; 
: 2R> R> R> SWAP R> SWAP >R SWAP ; 
: 2R@ R> R> R@ SWAP >R SWAP R@ SWAP >R ; 
: 2DROP DROP DROP ; 
: 2DUP OVER OVER ; 
: 2SWAP ROT >R ROT R> ; 
: 2OVER >R >R 2DUP R> R> 2SWAP ; 
: 2ROT 2>R 2SWAP 2R> 2SWAP ; 

: NOT DUP NAND ; 
: AND NAND NOT ; 
: OR NOT SWAP NOT NAND ; 
: NOR OR NOT ; 
: XOR 2DUP AND -ROT NOR NOR ; 
: XNOR XOR NOT ; 
: NEGATE NOT 1 + ; 
: - NEGATE + ; 

: 1+ 1 + ; 
: 1- 1 - ; 
: 2+ 2 + ; 
: 2- 2 - ; 

: D+ >R SWAP >R UM+ R> R> + + ; 
: DNEGATE NOT >R NOT 1 UM+ R> + ; 
: D- DNEGATE D+ ; 

: CELL+   1 + ; 
: CELL-   1 - ; 
: CELLS   0 + ; 
: ALIGNED 1 + ; 

: 2! SWAP OVER ! CELL+ ! ; 
: 2@ DUP CELL+ @ SWAP @ ; 

: TX! PUTC ; 
['] TX! 'EMIT ! 
: EMIT 'EMIT @EXECUTE ; 
: COUNT DUP 1+ SWAP @ ; 
: TYPE FOR AFT DUP @ EMIT 1+ THEN NEXT DROP ; 

: ?RX GETC ; 
['] ?RX '?KEY !  
: ?KEY '?KEY @EXECUTE ; 
: KEY BEGIN ?KEY UNTIL ; 

: ?DUP DUP IF DUP THEN ; 
: S>D DUP 0< ; 
: ABS DUP 0< IF NEGATE THEN ; 
: DABS DUP 0< IF DNEGATE THEN ; 

: U< 2DUP XOR 0< IF SWAP DROP 0< EXIT THEN - 0< ; 
: U> SWAP U< ; 
: = XOR IF FALSE EXIT THEN TRUE ; 
: < 2DUP XOR 0< IF DROP 0< EXIT THEN - 0< ; 
: > SWAP < ; 
: 0> NEGATE 0< ; 
: 0<> IF TRUE EXIT THEN FALSE ; 
: 0= 0 = ; 
: <> = 0= ; 

: D0< SWAP DROP 0< ; 
: D0> DNEGATE D0< ; 
: D0= OR 0= ; 
: D= D- D0= ; 
: D< ROT 2DUP XOR IF SWAP 2SWAP 2DROP < ; 
: DU< ROT 2DUP XOR IF SWAP 2SWAP THEN THEN 2DROP U< ; 
: DMIN 2OVER 2OVER 2SWAP D< IF 2SWAP THEN 2DROP ; 
: DMAX 2OVER 2OVER D< IF 2SWAP THEN 2DROP ; 

: M+ S>D D+ ; 
: M- S>D D- ; 

: MIN 2DUP SWAP < IF SWAP THEN DROP ; 
: MAX 2DUP < IF SWAP THEN DROP ; 
: UMIN 2DUP SWAP U< IF SWAP THEN DROP ; 
: UMAX 2DUP U< IF SWAP THEN DROP ; 
: WITHIN OVER - >R - R> U< ; 
: SP@ SPP @ ; 
: DEPTH SP@ SP0 @ - ; 
: PICK SP@ SWAP - 2- @ ; 
: NUF? ?KEY DUP IF 2DROP KEY 10 = THEN ; 

: UM/MOD 
    2DUP U< 
    IF NEGATE 
        15 FOR 
            >R DUP UM+ 
                >R >R DUP UM+ 
                R> + DUP R> R@ SWAP 
            >R UM+ 
            R> OR 
                IF >R DROP 1+ R> 
                ELSE DROP 
            THEN R> 
        NEXT DROP SWAP EXIT 
    THEN DROP 2DROP -1 DUP ; 
: M/MOD 
    DUP 0< DUP >R 
        IF NEGATE >R 
            DNEGATE R> 
        THEN >R DUP 0< 
        IF R@ + 
        THEN R> UM/MOD 
    R> 
    IF SWAP NEGATE SWAP THEN ; 
    
: /MOD OVER 0< SWAP M/MOD ; 
: MOD /MOD DROP ; 
: / /MOD NIP ; 

: UM* 
    0 SWAP 
    15 FOR 
        DUP UM+ >R >R 
        DUP UM+ 
        R> + 
        R> 
        IF >R OVER UM+ 
            R> + 
        THEN 
    NEXT 
    ROT DROP ; 

: * UM* DROP ; 

: M* 
    2DUP XOR 0< >R 
    ABS SWAP ABS UM* 
    R> IF DNEGATE THEN ; 

: */MOD >R M* R> M/MOD ; 
: */ */MOD SWAP DROP ; 

: 2* 2 * ; 
: 2/ 2 / ; 

: MU/MOD >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ; 
: D2* 2DUP D+ ; 
: DU2/ 2 MU/MOD ROT DROP ; 
: D2/ DUP >R 1 AND DU2/ R> 2/ OR ; 

: parse 
    tmp ! OVER >R DUP 
    IF 
        1 - tmp @ BL = 
        IF 
            FOR BL OVER @ - 0< NOT 
            WHILE 1+ 
            NEXT R> DROP 0 DUP EXIT 
            THEN R> 
        THEN 
            OVER SWAP 
        FOR tmp @ OVER @ - tmp @ BL = 
            IF 0< THEN 
        WHILE 1+ 
        NEXT DUP >R 
        ELSE R> DROP DUP 1+ >R 
        THEN OVER - R> R> - EXIT 
    THEN OVER R> - ; 
: PARSE >R TIB >IN @ + #TIB @ >IN @ - R> parse >IN +! ; 
: CHAR BL PARSE DROP @ ; 

: CMOVE 
    FOR AFT 
        >R 
            DUP @ R@ ! 1+ 
        R> 1+ 
    THEN NEXT 
    2DROP ; 
: PACK$ 
    DUP 
    >R 
        2DUP ! 1+ 2DUP + 0 SWAP ! SWAP CMOVE 
    R> ; 
: FILL SWAP FOR SWAP AFT 2DUP ! 1 + THEN NEXT 2DROP ; 
: -TRAILING FOR AFT BL OVER R@ + @ < IF R> 1 + EXIT THEN THEN NEXT 0 ; 
: WORD PARSE HERE PACK$ ; 
: TOKEN BL PARSE 31 MIN NP @ OVER - 1 - PACK$ ; 
: NAME> 2 CELLS - @ ; 
: LINK> 3 CELLS - ; 
: SAME? 
    FOR AFT 
        OVER R@ CELLS + @ 
        OVER R@ CELLS + @ 
        - ?DUP 
        IF R> DROP EXIT THEN 
    THEN 
    NEXT 0 ; 
: find 
    SWAP  
    DUP @ tmp ! 
    DUP @ >R 
    1+ SWAP   
    BEGIN 
        @ DUP 
        IF DUP @ R@ XOR 
            IF 1+ -1 
            ELSE 1+ tmp @ SAME? 
            THEN 
        ELSE 
            R> DROP 
            SWAP 1- SWAP 
            EXIT 
        THEN 
    WHILE 4 - 
    REPEAT 
    R> DROP NIP 1- 
    DUP NAME> 
    SWAP ; 
    
: ' TOKEN CURRENT find DUP IF DROP ELSE SWAP DROP THEN ; 
: ['] COMPILE ' ; IMMEDIATE 
: [COMPILE] ' , ; IMMEDIATE 
: [CHAR] CHAR [COMPILE] LITERAL ; IMMEDIATE 
: ( [CHAR] ) PARSE 2DROP ; IMMEDIATE 
: :NONAME HERE [COMPILE] ] ; 
: OVERT LAST @ CURRENT ! ; 
: $,n ( na -- )
    DUP LAST ! 1- 
    DUP =WORDLIST 
    SWAP ! 
    1- DUP HERE 
    SWAP ! 
    1- DUP CURRENT @ 
    SWAP ! 
    1- NP ! ; 

: doVAR R> ; 
: CREATE TOKEN $,n COMPILE doVAR OVERT ; 
: VARIABLE CREATE 0 , ; 
: : TOKEN $,n [COMPILE] ] ; 
: ; COMPILE EXIT [COMPILE] [  OVERT ; IMMEDIATE 
: RECURSE LAST @ CURRENT ! ; IMMEDIATE 
: DOES 
    LAST @ 2- @ 
    R> SWAP !  ; 
: DOES> COMPILE DOES COMPILE R> ; IMMEDIATE 
: CONSTANT CREATE , DOES> @ ; 

: 2LITERAL 
    SWAP [COMPILE] LITERAL 
    [COMPILE] LITERAL ; IMMEDIATE 
: 2CONSTANT CREATE , , DOES> 2@ ; 
: 2VARIABLE CREATE 2 CELLS ALLOT ; 

16 CONSTANT #BITS 
: LSHIFT 
    BEGIN DUP WHILE >R DUP + R> 1- REPEAT DROP ; 
    
: RSHIFT 
    0 SWAP [ #BITS ] LITERAL SWAP - 
    BEGIN DUP 
    WHILE >R 2DUP D+ R>  1- 
    REPEAT DROP NIP ; 

: SPACE BL EMIT ; 
: SPACES 0 MAX FOR SPACE NEXT ; 
: PAD HERE 80 + ;  
: DECIMAL 10 BASE ! ; 
: HEX 16 BASE ! ; 
: BINARY 2 BASE ! ; 
: OCTAL 8 BASE ! ; 

DECIMAL 

: >CHAR 127 AND DUP 127 BL WITHIN IF DROP 95 THEN ; 
: DIGIT 9 OVER < 7 AND + [CHAR] 0 + ; 
: <# PAD HLD ! ; 
: HOLD HLD @ 1- DUP HLD ! ! ; 
: # 0 BASE @ UM/MOD >R BASE @ UM/MOD SWAP DIGIT HOLD R> ; 
: #S BEGIN # 2DUP OR 0= UNTIL ; 
: SIGN 0< IF [ CHAR - ] LITERAL HOLD THEN ; 
: #> 2DROP HLD @ PAD OVER - ; 
: S.R OVER - SPACES TYPE ; 
: D.R >R DUP >R DABS <# #S R> SIGN #> R> S.R ; 
: U.R 0 SWAP D.R ; 
: .R >R S>D R> D.R ; 
: D. 0 D.R SPACE ; 
: U. 0 D. ;  
: . BASE @ 10 XOR IF U. EXIT THEN S>D D. ; 
: ? @ . ; 
: DU.R >R <# #S #> R> S.R ; 
: DU. DU.R SPACE ; 

: do$ R> R@ R> COUNT + 1+ >R SWAP >R ; 
: ."| do$ COUNT TYPE ; 
: $," [CHAR] " WORD COUNT + 1+ CP ! ; 
: ." COMPILE ."| $," ; IMMEDIATE 
: .( [CHAR] ) PARSE TYPE ; IMMEDIATE 
: $"| do$ ; 
: $" COMPILE $"| $," ; IMMEDIATE 
: s" [CHAR] " PARSE PAD PACK$ ; 

: CR 10 EMIT ;  
' DROP 'ECHO ! 
: ^H 
    >R OVER R> 
    SWAP OVER XOR 
    IF 
        BS EMIT 1+ 
        BL EMIT 
        BS EMIT 
    THEN ; 
: TAP DUP 'ECHO @EXECUTE OVER ! 1 + ; 
: KTAP 
    DUP 10 XOR 
    IF BS XOR 
        IF BL TAP 
        ELSE ^H 
        THEN EXIT 
    THEN 
    DROP NIP DUP ; 
' KTAP 'TAP ! 
: ACCEPT 
    OVER + OVER 
    BEGIN 
        2DUP XOR 
    WHILE 
        KEY 
        DUP BL - 95 U< 
        IF TAP 
        ELSE 'TAP @EXECUTE 
        THEN 
    REPEAT 
    DROP 
    OVER - ; 
' ACCEPT 'EXPECT ! 
: EXPECT 'EXPECT @EXECUTE SPAN ! DROP ; 
: QUERY TIB 80 'EXPECT @EXECUTE #TIB ! DROP 0 >IN ! ; 

: DIGIT? 
    >R 
    [CHAR] 0 - 
    9 OVER < 
    IF 7 - DUP 10 < OR THEN 
    DUP R> U< ; 
: /STRING DUP >R - SWAP R> + SWAP ; 

: >NUMBER 
    BEGIN DUP 
    WHILE >R DUP >R @ BASE @ DIGIT? 
    WHILE SWAP BASE @ UM* DROP 
    ROT BASE @ UM* D+ R> 1+ R> 1- 
    REPEAT DROP R> R> THEN ; 


: NUMBER? 
    OVER @ [CHAR] - = DUP >R IF 1 /STRING THEN 
    >R >R 0 DUP R> R> -1 DPL ! 
    BEGIN >NUMBER DUP 
    WHILE OVER @ [CHAR] . XOR 
        IF ROT DROP ROT R> 2DROP 0 EXIT 
        THEN 1 - DPL ! 1+ DPL @ 
    REPEAT 2DROP R> IF DNEGATE THEN -1 ; 
' NUMBER? 'NUMBER ! 
: $INTERPRET 
    CURRENT find ?DUP 
    IF DROP EXECUTE EXIT THEN 
    COUNT 'NUMBER @EXECUTE IF 
        DPL @ 0<  IF DROP THEN EXIT THEN ." ? " TYPE ; 
: $COMPILE 
    CURRENT find ?DUP 
    IF 1 - @ CR =IMMED = 
    IF EXECUTE ELSE , THEN EXIT 
    THEN COUNT 'NUMBER @EXECUTE 
    IF 
        DPL @ 0< 
        IF DROP [COMPILE] LITERAL
        ELSE SWAP [COMPILE] LITERAL [COMPILE] LITERAL 
        THEN EXIT 
    THEN ." ? " TYPE ; 
: eval COMPILE? IF $COMPILE ELSE $INTERPRET THEN ; 
' eval 'EVAL ! 
: EVAL 
    BEGIN TOKEN DUP @ WHILE 
        'EVAL @EXECUTE  
    REPEAT DROP ; 
    
: OK CR ." OK. " ; 
' OK 'PROMPT ! 
: QUIT 
    BEGIN 'PROMPT @EXECUTE QUERY EVAL AGAIN ; 
: .ID ?DUP IF COUNT TYPE EXIT THEN ." {noNAME} " ; 
: WORDS CURRENT @ 
    BEGIN 
        DUP SPACE .ID SPACE LINK> @ ?DUP 
    WHILE REPEAT CR ; 
: STATS 
    NP @ HERE 2DUP - >R 
    ." CP:" . SPACE 
    ." NP:" . SPACE 
    R> DUP ." FREE:" . SPACE 
    ." USED: " [ 1024 8 * ] LITERAL DUP >R SWAP - . SPACE 
    R> ." /" .  CR    ; 
: BYE ." See Ya " HALT ; 
: .S CR DEPTH FOR AFT R@ PICK . THEN NEXT ." <sp " ;  

' QUIT BOOT ! 
s" BOOT" CURRENT find LINK> BOOT SWAP ! DROP 

: [[ [COMPILE] [ ; IMMEDIATE 
: ]] [COMPILE] ] ; IMMEDIATE 
: [ COMPILE? [COMPILE] ] HERE 2 + [COMPILE] AHEAD ; IMMEDIATE 
: ] COMPILE EXIT 
    [COMPILE] THEN 
    SWAP STATE ! 
    COMPILE? IF [COMPILE] LITERAL THEN 
    ; IMMEDIATE 
: do >R ; 
: if ROT IF DROP do ELSE SWAP DROP do THEN ; 
: ifTrue [ NOP ] if ; 
: ifFalse [ NOP ] SWAP if ; 
: dip SWAP >R do R> ; 
: times SWAP FOR AFT DUP dip THEN NEXT ; 
: puts COUNT TYPE ; 
